-----------------------------------------------------------------------------------------------------
*** Create HIVE Database and Tables in Text file format ***
-----------------------------------------------------------------------------------------------------

1.	Create a database
	
		CREATE DATABASE retail_db_textfile;

2.	Creating orders tables

		CREATE TABLE orders (
		order_id int,
		order_date string,
		order_customer_id int,
		order_status string
		)
		ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
		STORED AS TEXTFILE;

3.	Creating order_items 

		CREATE TABLE order_items (
		order_item_id int,
		order_item_order_id int,
		order_item_product_id int,
		order_item_quantity smallint,
		order_item_subtotal float,
		order_item_product_price float
		)
		ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
		STORED AS TEXTFILE;


-----------------------------------------------------------------------------------------------------
*** Loading data into Hive tables ***
-----------------------------------------------------------------------------------------------------
		
1.	load data local inpath '/ LOCAL-FILE-SYTEM-PATH /' into table <TABLE NAME>;


-----------------------------------------------------------------------------------------------------
*** Create HIVE Database and Tables in ORC format ***
-----------------------------------------------------------------------------------------------------

1.	Create a database
	
		CREATE DATABASE retail_db_orc;

2.	Creating orders tables

		CREATE TABLE orders (
		order_id int,
		order_date string,
		order_customer_id int,
		order_status string
		)
		STORED AS orc;

3.	Creating order_items 

		CREATE TABLE order_items (
		order_item_id int,
		order_item_order_id int,
		order_item_product_id int,
		order_item_quantity smallint,
		order_item_subtotal float,
		order_item_product_price float
		)
		STORED AS orc;
		
-----------------------------------------------------------------------------------------------------
*** INSERT DATA FROM STAGING TABLES(i.e. TEXTFILE) TO FINAL TABLE(i.e. ORC Tables) ***
-----------------------------------------------------------------------------------------------------

1. Inserting from staging table TO final table(i.e. ORC Tables)

	insert into table retail_db_textfile.orders select * from retail_db_orc.orders;

-----------------------------------------------------------------------------------------------------
*** HIVE UDF'S - STRING MANIPULATION ***
-----------------------------------------------------------------------------------------------------

1.	Display all function in Hive. 

		show functions;

2.	Describe function length;
	
		select order_status, length(order_status) from orders limit 100;
		
3.	Mosty commonly used UDF in Hive

		substr (or) substring
		instr
		like
		rlike
		lcase (or) lower
		ucase (or) upper
		trim, ltrim, rtrim
		lpad, rpad

4.	Testing UDF is Hive 

	substr:
	
			select length('Hello world')
			select substr('Hello world',7);
				> world
			select substr('Hello world, How are you',7,5);
				> world
			select substr('Hello world, How are you',-3);
				> you
			select substr('Hello world, How are you',-7,3);
				> are
	
	instr:
			
			select instr('Hello World, How are you','World');
				> 7
	
	like:   
	
			select 'Hello World, How are you' like '%World%'
				> true
				
	length & trim:
		
			select length(trim(' Hello World  '))
				> 11
				
	lpad:
	
			select lpad(9, 3, '0')
				> 009
				
	cast:
	
			select cast('12' as int)
	
	index & split:
	
			select index(split('Hello World, How are you', ' '), 4)
				> you
			
	*** EXAMPLE ***
	
		select cast( substr(order_date, 6, 2) as int) from orders limit 1;
			> 7
-----------------------------------------------------------------------------------------------------
*** HIVE UDF'S - DATE MANIPULATION ***
-----------------------------------------------------------------------------------------------------					

1.	Mosty commonly used UDF in Hive

	current_date
	current_timestamp
	date_add
	date_format
	date_sub
	datediff
	day
	dayofmonth
	to_date
	
	to_unix_timestamp
	to_utc_timestamp
	from_unixtime
	from_utc_tiemstamp
	
	

	date_format:
		
		select date_format(current_date, 'y');
			> 2017
		select date_format(current_date, 'd');
			> 28
		
	day & dayofmonth:
	
		select dayofmonth(current_date);
			> 28
		
	current_timestamp & to_date:
		
		select to_date(current_timestamp);
			> 2017-11-28
			
	------------------------------------------------------
		*** UNIX TIMESTAMP ***
	------------------------------------------------------
	
	to_unix_timestamp:
		
		select to_unix_timestamp(current_timestamp)
			> 1511908016
	
	from_unixtime
	
		select from_unixtime(1511908016)
			> 2017-11-28 14:26:56
			
	*** EXAMPLE ****

		select to_date(order_date) from orders limit 10;
		
		select date_add(order_date, 10) from orders limit 10;

-----------------------------------------------------------------------------------------------------
*** HIVE UDF'S - ROW LEVEL TRANSFORMATION ***
-----------------------------------------------------------------------------------------------------
			
1.	Extract only YEAR & MONTH in date (retail_db.orders) and convert into int
	
		select cast( 
						(concat(substr(order_date, 1, 4), substr(order_date, 6, 2)))
					as int)
		from orders limit 10;
		
		`> 201307
		 > 201307
		 > 201308
		 
		 select date
		 
2.		select cast(
						(date_format(order_date,'YYYYMM'))
					as int)		 
		from orders limit 10;

-----------------------------------------------------------------------------------------------------
*** HIVE JOINING DATA ***
-----------------------------------------------------------------------------------------------------
				
1.	Display all customers how placed the orders and customers who has not placed orders.

		SELECT * FROM customers c LEFT OUTER JOIN orders o ON o.order_customer_id = c.customer_id;
	
2.	Display the count of customer who has never placed an order 
	
		SELECT count(*) FROM  customers c LEFT OUTER JOIN orders o ON o.order_customer_id = c.customer_id
		WHERE c.customer_id is null;

3.	Display sum of all the order_status in an orders table.
		
		SELECT order_status, count(*) as order_count from orders group by order_status;

4.	Display order_id revenue

		SELECT o.order_id, sum(oi.order_item_subtotal) as order_revenue
		FROM orders o JOIN order_items oi 
		ON o.order_id = oi.order_item_order_id
		GROUP BY o.order_id;
		

-----------------------------------------------------------------------------------------------------
*** HIVE GROUP BY & AGGREGRATION, ORDER BY &  SORY BY KEYS ***
-----------------------------------------------------------------------------------------------------

1.	order_revenue: Display revenue of each order which are COMPLETE & CLOSED 

		SELECT o.order_id, o.order_date, o.order_status, sum(oi.order_item_subtotal) order_revenue
		FROM orders o JOIN order_items oi 
		ON o.order_id = oi.order_item_order_id 
		where o.order_status in ('COMPLETE','CLOSED')
		GROUP BY o.order_id, o.order_date, o.order_status
		HAVING  order_revenue >= 1000
		ORDER BY o.order_id, order_revenue desc;
			
2.	order_revenue: Sorting using DISTRIBUTE BY key: Display revenue of each order which are COMPLETE & CLOSED 

		SELECT o.order_id, o.order_date, o.order_status, sum(oi.order_item_subtotal) order_revenue
		FROM orders o JOIN order_items oi 
		ON o.order_id = oi.order_item_order_id 
		where o.order_status in ('COMPLETE','CLOSED')
		GROUP BY o.order_id, o.order_date, o.order_status
		HAVING  order_revenue >= 1000
		DISTRIBUTE BY o.order_id SORT BY o.order_id, order_revenue desc;

3.	daily_revenue: Display daily revenue for each day

		SELECT o.order_date, round(sum(oi.order_item_subtotal),2) daily_revenue
		FROM orders o JOIN order_items oi 
		ON o.order_id = oi.order_item_id 
		where o.order_status in ('COMPLETE','CLOSED')
		GROUP BY  o.order_date;
	


-----------------------------------------------------------------------------------------------------
*** Notes ***
-----------------------------------------------------------------------------------------------------

1.	Hive conf files 

	/etc/hive/conf/hive-site.xml

2.	Cloudera Impala does not support ORCFile Format. They recommend to use Parquet file format that is supported by Hive, MR, Impala and many other systems. 

	
-----------------------------------------------------------------------------------------------------
*** PROBLEM STATEMENT ***
-----------------------------------------------------------------------------------------------------

	Get daily_revenue by product considering completed & closed orders
		
		PRODUCTS have to be read from local file system. DataFrame need to be created.
		
		JOIN "ORDERS" & "ORDER_ITEMS"
		
		FILTER ON order_status from "ORDERS" data
	
	Data need to be sorted by ascending order by data and then descending order by revenue computed for each product for each day
	
		SORT data by order_date in ascending & daily_revenue per product in descending order
		
	
-----------------------------------------------------------------------------------------------------
*** PROBLEM STATEMENT ***
-----------------------------------------------------------------------------------------------------

SELECT o.order_date, p.product_name, sum(oi.order_item_subtotal) daily_revenue_per_product
FROM orders o JOIN order_items oi 
ON o.order_id = oi.order_item_order_id
JOIN products p ON p.product_id = oi.order_item_product_id
WHERE o.order_status IN ('COMPLETE','CLOSED')
GROUP BY o.order_date, p.product_name
ORDER BY o.order_date, daily_revenue_per_product;
	
	
	
	
	
	
	
	
	
	
	
